// Generated by CoffeeScript 1.6.3
var Ast, async, fs, glob, indir, nil, outdir, path, _i, _ref,
  __slice = [].slice;

fs = require('fs');

path = require('path');

glob = require('glob');

async = require('async2');

_ref = process.argv, nil = 3 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 2) : (_i = 0, []), indir = _ref[_i++], outdir = _ref[_i++];

Ast = require('./Ast');

require('glob')("" + indir + "/**/*.java", function(err, files) {
  var file, flow, outfile, relfile, _fn, _j, _len;
  if (err) {
    throw err;
  }
  flow = new async;
  _fn = function(infile, outfile) {
    return flow.serial(function(next) {
      var ast;
      ast = new Ast;
      console.log("reading " + infile + "...");
      return ast.open(infile, function(code) {
        return require('child_process').exec("mkdir -p " + (path.dirname(outfile)), function(err) {
          if (err) {
            throw err;
          }
          return fs.writeFile(outfile, code.toString(), {
            encoding: 'utf8'
          }, function(err) {
            if (err) {
              throw err;
            }
            console.log("wrote " + outfile + ".");
            return next();
          });
        });
      });
    });
  };
  for (_j = 0, _len = files.length; _j < _len; _j++) {
    file = files[_j];
    relfile = path.relative(indir, file);
    outfile = path.join(outdir, relfile);
    outfile = path.join(outdir, path.relative(indir, path.dirname(file)), path.basename(file, '.java') + '.coffee');
    _fn(file, outfile);
  }
  return flow.go(function(err) {
    if (err) {
      throw err;
    }
    return console.log('done');
  });
});
